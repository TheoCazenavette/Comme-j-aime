pipeline {
    agent any
    parameters {
        choice(name: 'SEXE', choices: ['MR.', 'MME.'], description: 'veuillez entrer votre sexe')
        string(name: 'NOM',  description: 'veuillez entrer votre nom')
        string(name: 'PRENOM',  description: 'veuillez entrer votre prenom')
        date(name: 'DDN',  description: 'veuillez entrer votre date de naisance')
        int(name:'TAILLE', description:'Taille du client')
        int(name:'POIDS', description:'Poids du client')
        int(name:'ABONNEMENT', description:'status de l abonnement')
    }
    stages {
        stage('Username information') {
            steps {
                script {
                    echo "Veuillez entrer vos informations:"
                    echo " Votre nom :${parameters.NOM}"
                    echo " Votre prenom ${parameters.PRENOM}"
                    echo " date de naissaince ${parameters.DDN}"
                    echo " Votre poids ${parameters.POIDS}"
                    echo " Votre taille ${parameters.TAILLE}"
                    
                    if (parameters.SEXE=="MME.") {
                        echo "Bonjour Mme. ${parameters.NOM} ${parameters.PRENOM}"
                    }
                    else {
                        echo "Bonjour MR. ${parameters.NOM} ${parameters.PRENOM}"
                    }
                    
                    echo "et bienvenue!"
                    echo
                    ABONNEMENT=0
                }
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Deploy') {
            steps {
                script {
                    docker.withRegistry('https://registry.example.com', 'docker-credentials') {
                        def image = docker.build("my-image:${env.BUILD_NUMBER}")
                        image.push()
                        docker.image("my-image:${env.BUILD_NUMBER}").run("-p 8080:8080")
                    }
                }
            }
        }
    }
}
